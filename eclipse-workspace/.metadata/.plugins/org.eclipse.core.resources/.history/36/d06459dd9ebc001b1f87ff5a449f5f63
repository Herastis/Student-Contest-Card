
/** 
* Copyright (c) 1998, 2021, Oracle and/or its affiliates. All rights reserved.
* 
*/

/*
*/

/*
* @(#)Wallet.java	1.11 06/01/03
*/

package com.oracle.jcclassic.samples.wallet;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.OwnerPIN;

public class Wallet extends Applet {

	public static byte[] id_pin = {
			 (byte) 0x01, 	//id
			 (byte) 0x02	//pin card
	};	
	public static byte codHexa;
	public static byte punctajHexa;
	public static byte codDisciplina;
   /* constants declaration */
	public static byte[] student = {
	 (byte) 0x0B,	//cod_disciplina ML: 11 HEX = 0x0B
	 (byte) 0x06,	//nota 6
	 (byte) 0x0A,	//data zi 10
	 (byte) 0x01,	//data luna 1
	 (byte) 0x7E5,	//data an 2021
	 (byte) 0x01,	//cod concurs: 792
	 (byte) 0x00,	//punctaj obtinut 30
	 

	 (byte) 0x15,	//cod_disciplina AI: 21 HEX = 0x15
	 (byte) 0x09,	//nota 9
	 (byte) 0x0D,	//data zi 13
	 (byte) 0x01,	//data luna 1
	 (byte) 0x7E5,	//data an 2021
	 (byte) 0x02,	//cod concurs: 2
	 (byte) 0x00,	//punctaj obtinut
	 

	 (byte) 0x1F,	//cod_disciplina Python: 31
	 (byte) 0x06,	//nota 6
	 (byte) 0x08,	//data zi 8
	 (byte) 0x01,	//data luna 1
	 (byte) 0x7E5,	//data an 2021
	 (byte) 0x03,	//cod concurs: 387
	 (byte) 0x00,	//punctaj obtinut
	 

	 (byte) 0x29,	//cod_disciplina Crypto: 41 HEX = 29
	 (byte) 0x03,	//nota 3
	 (byte) 0x0E,	//data zi 14
	 (byte) 0x01,	//data luna 1
	 (byte) 0x7E5,	//data an 2021
	 (byte) 0x04,	//cod concurs: 576
	 (byte) 0x00,	//punctaj obtinut
	 

	 (byte) 0x33,	//cod_disciplina .NET: 51
	 (byte) 0x06,	//nota 6
	 (byte) 0x07,	//data zi 7
	 (byte) 0x01,	//data luna 1
	 (byte) 0x7E5,	//data an 2021
	 (byte) 0x05,	//cod concurs: 200
	 (byte) 0x00,	//punctaj obtinut
	 
};
	
	
	
   // code of CLA byte in the command APDU header
   final static byte Wallet_CLA = (byte) 0x80;

   // codes of INS byte in the command APDU header
   final static byte VERIFY = (byte) 0x20;
   //COMISIE
   final static byte COMISIE = (byte) 0x30;
   //PROFESOR
   final static byte PROFESOR = (byte) 0x40;
   //Datele unui student
   final static byte STUDENTS_INFO = (byte) 0x50;
   //SECRETARIAT
   final static byte SECRETARIAT = (byte)0x60;

   // maximum balance
   final static short MAX_BALANCE = 0x7FFF;
   // maximum transaction amount
   final static byte MAX_TRANSACTION_AMOUNT = 127;

   // maximum number of incorrect tries before the
   // PIN is blocked
   final static byte PIN_TRY_LIMIT = (byte) 0x03;
   // maximum size PIN
   final static byte MAX_PIN_SIZE = (byte) 0x08;
   //puk
   final static byte puk[] = {0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09};

   // signal that the PIN verification failed
   final static short SW_VERIFICATION_FAILED = 0x6300;
   //add by me, to see if the PIN was wrong more than three times
   final static short SW_SECURITY_STATUS_NOT_SATISFIED=0x6982;
   // signal the the PIN validation is required
   // for a credit or a debit transaction
   final static short SW_PIN_VERIFICATION_REQUIRED = 0x6301;
   // signal invalid transaction amount
   // amount > MAX_TRANSACTION_AMOUNT or amount < 0
   final static short SW_INVALID_TRANSACTION_AMOUNT = 0x6A83;

   // signal that the balance exceed the maximum
   final static short SW_EXCEED_MAXIMUM_BALANCE = 0x6A84;
   // signal the the balance becomes negative
   final static short SW_NEGATIVE_BALANCE = 0x6A85;
   final static short SW_EXCEED_MAXIMUM_FIDELITY_POINTS = 0x6A86;
   /* instance variables declaration */
   OwnerPIN pin;
   short balance;
   short fidelityPoints=0;

   private Wallet(byte[] bArray, short bOffset, byte bLength) {

       // It is good programming practice to allocate
       // all the memory that an applet needs during
       // its lifetime inside the constructor
       pin = new OwnerPIN(PIN_TRY_LIMIT, MAX_PIN_SIZE);

       byte iLen = bArray[bOffset]; // aid length
       bOffset = (short) (bOffset + iLen + 1);
       byte cLen = bArray[bOffset]; // info length
       bOffset = (short) (bOffset + cLen + 1);
       byte aLen = bArray[bOffset]; // applet data length

       // The installation parameters contain the PIN
       // initialization value
       pin.update(bArray, (short) (bOffset + 1), aLen);
       register();

   } // end of the constructor

   public static void install(byte[] bArray, short bOffset, byte bLength) {
       // create a Wallet applet instance
       new Wallet(bArray, bOffset, bLength);
   } // end of install method

   @Override
   public boolean select() {

       // The applet declines to be selected
       // if the pin is blocked.
       if (pin.getTriesRemaining() == 0) {
           return false;
       }

       return true;

   }// end of select method

   @Override
   public void deselect() {

       // reset the pin value
       pin.reset();

   }

   @Override
   public void process(APDU apdu) {

       // APDU object carries a byte array (buffer) to
       // transfer incoming and outgoing APDU header
       // and data bytes between card and CAD

       // At this point, only the first header bytes
       // [CLA, INS, P1, P2, P3] are available in
       // the APDU buffer.
       // The interface javacard.framework.ISO7816
       // declares constants to denote the offset of
       // these bytes in the APDU buffer

       byte[] buffer = apdu.getBuffer();
       // check SELECT APDU command

       if (apdu.isISOInterindustryCLA()) {
           if (buffer[ISO7816.OFFSET_INS] == (byte) (0xA4)) {
               return;
           }
           ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
       }

       // verify the reset of commands have the
       // correct CLA byte, which specifies the
       // command structure
       if (buffer[ISO7816.OFFSET_CLA] != Wallet_CLA) {
           ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
       }

       switch (buffer[ISO7816.OFFSET_INS]) {
           case STUDENTS_INFO:
               getStudentsInfo(apdu);
               return;
           case PROFESOR:
               get_nota_data_concurs_punctaj(apdu);
               return;
           case COMISIE:
               save_contest_mark(apdu);
               return;
           case VERIFY:
               verify(apdu);
               return;
           case SECRETARIAT:
	           	get_concursuri(apdu);
	           	return;
           default:
               ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
       }

   } // end of process method

   private void save_contest_mark(APDU apdu) {

       // access authentication
       if (!pin.isValidated()) {
           ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);
       }

       byte[] buffer = apdu.getBuffer();

       // Lc byte denotes the number of bytes in the
       // data field of the command APDU
       byte numBytes = buffer[ISO7816.OFFSET_LC];

       // indicate that this APDU has incoming data
       // and receive data starting from the offset
       // ISO7816.OFFSET_CDATA following the 5 header
       // bytes.
       byte byteRead = (byte) (apdu.setIncomingAndReceive());

       // it is an error if the number of data bytes
       // read does not match the number in Lc byte
       if ((numBytes != 2) || (byteRead != 2)) {
           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
       }

       // get the credit amount
       //byte creditAmount = buffer[ISO7816.OFFSET_CDATA];
   
       
       codHexa = (byte) buffer[ISO7816.OFFSET_CDATA]; 
       punctajHexa = (byte) buffer[ISO7816.OFFSET_CDATA+1];
      
//       byte codHexa = (byte) 0x01;
//       byte punctajHexa = buffer[ISO7816.OFFSET_CDATA +1];
       
       for (byte i = 5; i < student.length; i += 7)
          	if(student[i] == codHexa) {
          		student[i+1] = punctajHexa;
          		break;
          	}
    	   

	   short le = apdu.setOutgoing();

       if (le < student.length) {
           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
       }

       // informs the CAD the actual number of bytes
       // returned
       apdu.setOutgoingLength((byte) student.length);
       	
       for (byte i = 0; i < student.length; i++)
       	buffer[i] = student[i];
       	
     
       // send the 4-byte balance at the offset
       // 0 in the apdu buffer
       apdu.sendBytes((short) 0, (short) student.length);
       
       //getStudentsInfo(apdu);
       
   } // end of deposit method

   private void get_nota_data_concurs_punctaj(APDU apdu) {

       // access authentication
       if (!pin.isValidated()) {
           ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);
       }

       byte[] buffer = apdu.getBuffer();

       // Lc byte denotes the number of bytes in the
       // data field of the command APDU
       byte numBytes = buffer[ISO7816.OFFSET_LC];

       // indicate that this APDU has incoming data
       // and receive data starting from the offset
       // ISO7816.OFFSET_CDATA following the 5 header
       // bytes.
       byte byteRead = (byte) (apdu.setIncomingAndReceive());

       // it is an error if the number of data bytes
       // read does not match the number in Lc byte
       if ((numBytes != 1) || (byteRead != 1)) {
           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
       }

       // get the credit amount
       //byte creditAmount = buffer[ISO7816.OFFSET_CDATA];
   
       
       codDisciplina = (byte) buffer[ISO7816.OFFSET_CDATA]; 
//       byte nota;
//       byte zi;
//       byte luna;
//       byte an;
//       byte punctaj;
      
//       byte codHexa = (byte) 0x01;
//       byte punctajHexa = buffer[ISO7816.OFFSET_CDATA +1];
       
       
       short le = apdu.setOutgoing();

//       if (le < 7) {
//           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
//       }
       
       // informs the CAD the actual number of bytes
       // returned
       apdu.setOutgoingLength((byte) 6);
       
       for (byte i = 0; i < student.length; i += 7)
          	if(student[i] == codDisciplina) {
          		buffer[0] = student[i+1];
          		buffer[1] = student[i+2];
          		buffer[2] = student[i+3];
          		buffer[3] = student[i+4];
          		buffer[4] = student[i+5];
          		buffer[5] = student[i+6];
          		break;
          	}
    	   
       // send the 7-byte balance at the offset
       // 0 in the apdu buffer
       apdu.sendBytes((short) 0, (short) 6);
       
       //getStudentsInfo(apdu);

   } // end of debit method

   private void getStudentsInfo(APDU apdu) {
	   byte[] buffer = apdu.getBuffer();
	   short le = apdu.setOutgoing();

       if (le < student.length) {
           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
       }

       // informs the CAD the actual number of bytes
       // returned
       apdu.setOutgoingLength((byte) student.length);
       	
       for (byte i = 0; i < student.length; i++)
       	buffer[i] = student[i];
       	
     
       // send the 4-byte balance at the offset
       // 0 in the apdu buffer
       apdu.sendBytes((short) 0, (short) student.length);
   } // end of getBalance method

   private void verify(APDU apdu) {

       byte[] buffer = apdu.getBuffer();
       // retrieve the PIN data for validation.
       byte byteRead = (byte) (apdu.setIncomingAndReceive());

       // check pin
       // the PIN data is read into the APDU buffer
       // at the offset ISO7816.OFFSET_CDATA
       // the PIN data length = byteRead
       if (pin.getTriesRemaining()==0){
       	ISOException.throwIt(SW_SECURITY_STATUS_NOT_SATISFIED);
       }
       if (pin.check(buffer, ISO7816.OFFSET_CDATA, byteRead) == false) {
           ISOException.throwIt(SW_VERIFICATION_FAILED);
       }
       

   } // end of validate method
   private void get_concursuri(APDU apdu) {

	   byte[] buffer = apdu.getBuffer();
	   short le = apdu.setOutgoing();

       if (le < 5) {
           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
       }

       // informs the CAD the actual number of bytes
       // returned
       apdu.setOutgoingLength((byte) student.length);
       	
       for (byte i = 0; i < student.length; i += 6)
       	buffer[i] = student[i];
       	
     
       // send the 4-byte balance at the offset
       // 0 in the apdu buffer
       apdu.sendBytes((short) 0, (short) 5);

   } // end of reset pin
   


} // end of class Wallet



